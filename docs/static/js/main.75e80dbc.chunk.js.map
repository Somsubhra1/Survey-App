{"version":3,"sources":["firebaseConfig.js","Usurvey.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firebase","require","uuid","initializeApp","USurvey","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","uid","v1","studentName","answers","answer1","answer2","answer3","isSubmitted","nameSubmit","bind","assertThisInitialized","answerSelected","questionSubmit","event","preventDefault","refs","name","value","setState","console","log","target","database","ref","set","questions","react_default","a","createElement","className","onSubmit","method","type","placeholder","onChange","Component","App","Usurvey","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75e80dbc.chunk.js","sourcesContent":["var config = {\n    apiKey: \"AIzaSyBpGMWXIgYfsDxaZSYPgLv6Q6yU2H5ZGc8\",\n    authDomain: \"usurvey-e4b65.firebaseapp.com\",\n    databaseURL: \"https://usurvey-e4b65.firebaseio.com\",\n    projectId: \"usurvey-e4b65\",\n    storageBucket: \"usurvey-e4b65.appspot.com\",\n    messagingSenderId: \"616739570327\"\n};\n\nexport default config;\n","import React, {Component} from 'react';\nimport config from './firebaseConfig'; // importing firebase API configurations from separate config file\n\n// requiring dependencies:\n\nvar firebase = require('firebase');\nvar uuid = require('uuid');\n\n// Initialize Firebase:\n\nfirebase.initializeApp(config);\n\nclass USurvey extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      uid: uuid.v1(),\n      studentName: '',\n      answers: {\n        answer1: '',\n        answer2: '',\n        answer3: '',\n      },\n      isSubmitted: false,\n    };\n\n    this.nameSubmit = this.nameSubmit.bind(this);\n    this.answerSelected = this.answerSelected.bind(this);\n    this.questionSubmit = this.questionSubmit.bind(this);\n\n  }\n\n  nameSubmit(event) {\n    event.preventDefault();\n    var studentName = this.refs.name.value; // getting value from input field\n    this.setState({ studentName: studentName }, function() {\n      console.log(this.state);\n    });\n\n  }\n\n  answerSelected(event) {\n    // console.log(event.target.value);//  getting the values from radio buttons\n    var answers = this.state.answers;\n    if (event.target.name === 'answer1') {\n      answers.answer1 = event.target.value;\n    } else if (event.target.name === 'answer2') {\n      answers.answer2 = event.target.value;\n    } else if (event.target.name === 'answer3') {\n      answers.answer3 = event.target.value;\n    }\n    this.setState({ answers: answers }, function () {\n      console.log(this.state);\n    });\n  }\n\n  questionSubmit(event) {\n    event.preventDefault();\n    this.setState({isSubmitted: true });\n    // setting values to database:\n    firebase.database().ref('Usurvey/'+ this.state.uid).set({\n      studentName:this.state.studentName,\n      answers: this.state.answers,\n    });\n  }\n\n  render(){\n\n    var studentName;\n    var questions;\n\n    if(this.state.studentName === '' && this.state.isSubmitted === false) {\n      studentName = <div className=\"header\">\n        <h1>Hey, please let us know your name:</h1>\n        <form onSubmit={this.nameSubmit} method=\"POST\">\n          <input className=\"inputname\" type=\"text\" placeholder=\"Enter your name\" ref=\"name\"/>\n        </form>\n      </div>;\n      questions = '';\n\n    } else if (this.state.studentName !== '' && this.state.isSubmitted === false) {\n      studentName = <h1>Hey there, {this.state.studentName}. Please take the survey</h1>;\n      questions = <div>\n        <hr />\n        <h2>Here are some questions</h2>\n        <form onSubmit={this.questionSubmit} method=\"POST\">\n          <div className=\"card\">\n            <label>What kind of courses you like?</label> <br />\n            <input type=\"radio\" name=\"answer1\" value=\"Technology\" onChange={this.answerSelected}/>Technology\n            <input type=\"radio\" name=\"answer1\" value=\"Design\" onChange={this.answerSelected}/>Design\n            <input type=\"radio\" name=\"answer1\" value=\"Marketing\" onChange={this.answerSelected}/>Marketing\n          </div>\n          <div className=\"card\">\n            <label>Who are you?</label> <br />\n            <input type=\"radio\" name=\"answer2\" value=\"Student\" onChange={this.answerSelected}/>Student\n            <input type=\"radio\" name=\"answer2\" value=\"Teacher\" onChange={this.answerSelected}/>Teacher\n            <input type=\"radio\" name=\"answer2\" value=\"Other\" onChange={this.answerSelected}/>Other\n          </div>\n          <div className=\"card\">\n            <label>Do you like the courses?</label> <br />\n            <input type=\"radio\" name=\"answer3\" value=\"Yes\" onChange={this.answerSelected}/>Yes\n            <input type=\"radio\" name=\"answer3\" value=\"Maybe\" onChange={this.answerSelected}/>Maybe\n            <input type=\"radio\" name=\"answer3\" value=\"No\" onChange={this.answerSelected}/>No\n          </div>\n          <input type=\"submit\" className=\"feedback-button\" />\n\n        </form>\n\n      </div>;\n    } else if(this.state.isSubmitted===true && this.state.studentName !== ''){\n      studentName = <h1 className=\"header\">Thanks for answering the questions {this.state.studentName}!</h1>;\n    }\n\n    return(\n      <div>\n        {studentName}\n        {questions}\n      </div>\n    );\n  }\n}\n\nexport default USurvey;\n","import React, { Component } from 'react';\nimport Usurvey from './Usurvey';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App text-center\">\n        <Usurvey />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}